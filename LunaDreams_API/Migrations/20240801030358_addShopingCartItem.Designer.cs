// <auto-generated />
using System;
using LunaDreams_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LunaDreams_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240801030358_addShopingCartItem")]
    partial class addShopingCartItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LunaDreams_API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LunaDreams_API.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LunaDreams_API.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Main Dish",
                            Description = "A hearty noodle soup with thick, chewy rice or tapioca noodles, often served with shrimp, crab, or pork in a savoury broth.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/banh-canh.jpg",
                            Name = "Vietnamese Thick Noodle Soup",
                            Price = 8.5,
                            SpecialTag = "Traditional"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Main Dish",
                            Description = "Grilled pork patties and slices of pork belly served over rice noodles with fresh herbs and a tangy dipping sauce.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/bun-cha.jpg",
                            Name = "Bun Cha",
                            Price = 9.0,
                            SpecialTag = "Popular"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Main Dish",
                            Description = "A fragrant noodle soup made with beef or chicken, rice noodles, and a rich broth, garnished with herbs, lime, and bean sprouts.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/pho.jpg",
                            Name = "Pho",
                            Price = 10.0,
                            SpecialTag = "Iconic"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Main Dish",
                            Description = "A Vietnamese sandwich made with a French baguette, filled with meats such as pork, chicken, or pâté, and topped with pickled vegetables and fresh herbs.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/banh-mi.jpg",
                            Name = "Banh Mi",
                            Price = 7.0,
                            SpecialTag = "Fusion"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Main Dish",
                            Description = "Broken rice served with grilled pork, pickled vegetables, and a fried egg, often accompanied by a side of fish sauce.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/com-tam.jpg",
                            Name = "Broken Rice",
                            Price = 8.0,
                            SpecialTag = "Classic"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Appetizer",
                            Description = "Fresh spring rolls filled with shrimp, herbs, pork, rice noodles, and lettuce, often served with a hoisin-peanut dipping sauce.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/nem-ran.jpg",
                            Name = "Vietnamese Spring Rolls",
                            Price = 6.0,
                            SpecialTag = "Light"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Appetizer",
                            Description = "Savory crepes made from rice flour, turmeric, and coconut milk, stuffed with pork, shrimp, bean sprouts, and green onions, usually served with lettuce and herbs.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/che-thai.jpg",
                            Name = "Vietnamese Pancakes",
                            Price = 7.5,
                            SpecialTag = "Crispy"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Main Dish",
                            Description = "A noodle soup with a clear, flavorful broth, typically made with pork or seafood, and served with a variety of toppings such as bean sprouts, herbs, and lime.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/hu-tieu.jpg",
                            Name = "Hu Tieu",
                            Price = 8.5,
                            SpecialTag = "Savory"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Main Dish",
                            Description = "A specialty noodle dish from Quang Nam province, featuring wide rice noodles in a flavorful broth with a mix of proteins (often shrimp, pork, or chicken), and garnished with peanuts, herbs, and crispy rice crackers.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/mi-quang.jpg",
                            Name = "Quang-style Noodles",
                            Price = 9.0,
                            SpecialTag = "Regional"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Dessert",
                            Description = "A Thai-inspired Vietnamese dessert with a mix of colorful fruits, jelly, and coconut milk, often served chilled.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/che-thai.jpg",
                            Name = "Thai-style Dessert",
                            Price = 4.5,
                            SpecialTag = "Fruity"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Dessert",
                            Description = "A Vietnamese-style caramel custard dessert, smooth and creamy, often topped with a caramel sauce.",
                            Image = "https://phase2foodimages.blob.core.windows.net/lunarestaurant/flan.jpg",
                            Name = "Flan",
                            Price = 3.5,
                            SpecialTag = "Creamy"
                        });
                });

            modelBuilder.Entity("LunaDreams_API.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LunaDreams_API.Models.CartItem", b =>
                {
                    b.HasOne("LunaDreams_API.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunaDreams_API.Models.ShoppingCart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LunaDreams_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LunaDreams_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LunaDreams_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LunaDreams_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LunaDreams_API.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
